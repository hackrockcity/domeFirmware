import host
import binascii
import unittest

class LedStripsTest(unittest.TestCase):
	def setUp(self):
		self.r = host.LedStrips()

	def test_RgbRowToStrips_too_little_data(self):
		self.assertRaises(Exception, self.r.RgbRowToStrips, '1234567890123')

	def test_RgbRowToStrips_too_much_data(self):
		self.assertRaises(Exception, self.r.RgbRowToStrips, '12345678901234')

	def test_RgbRowToStrips(self):
		cases = [
			['\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF',
			 '\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF'],
			['\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
			 '\xFF\x00\x00\x00\x00\x00\x00\x00\xFF\x00\x00\x00\x00\x00\x00\x00\xFF\x00\x00\x00\x00\x00\x00\x00'],
			['\x80\x00\x00\x40\x00\x00\x20\x00\x00\x10\x00\x00\x08\x00\x00\x04\x00\x00\x02\x00\x00\x00\x00\x00',
			 '\xFF\x00\x00\x00\x00\x00\x00\x00\xFF\x01\x02\x04\x08\x10\x20\x40\xFF\x00\x00\x00\x00\x00\x00\x00'],
			['\x00\x80\x00\x00\x40\x00\x00\x20\x00\x00\x10\x00\x00\x08\x00\x00\x04\x00\x00\x02\x00\x00\x00\x00',
			 '\xFF\x01\x02\x04\x08\x10\x20\x40\xFF\x00\x00\x00\x00\x00\x00\x00\xFF\x00\x00\x00\x00\x00\x00\x00'],
			['\x00\x00\x80\x00\x00\x40\x00\x00\x20\x00\x00\x10\x00\x00\x08\x00\x00\x04\x00\x00\x02\x00\x00\x00',
			 '\xFF\x00\x00\x00\x00\x00\x00\x00\xFF\x00\x00\x00\x00\x00\x00\x00\xFF\x01\x02\x04\x08\x10\x20\x40'],
		]

		for case in cases:
			assert(self.r.RgbRowToStrips(case[0]) == case[1])

if __name__ == "__main__":
	unittest.main()
